{"version":3,"sources":["components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","components/Feedback/Feedback.jsx","components/App/App.jsx","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","FeedbackOptions","options","onLeaveFeedback","map","id","label","type","onClick","Section","title","children","Notification","message","Feedback","state","countTotalFeedback","value","countPositiveFeedbackPercentage","count","Math","round","Number","isNaN","handleButtonClick","setState","prevState","this","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAsCeA,G,MApCI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,4CACA,qBAAIC,UAAU,OAAd,UACE,qBAAIA,UAAU,OAAd,UACE,yCACA,+BAAOL,OAET,qBAAIK,UAAU,OAAd,UACE,4CACA,+BAAOJ,OAET,qBAAII,UAAU,OAAd,UACE,wCACA,+BAAOH,OAET,qBAAIG,UAAU,OAAd,UACE,0CACA,+BAAOF,OAET,qBAAIE,UAAU,OAAd,UACE,sDACA,iCAAOD,EAAP,kBCOKE,G,MA9BS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAClB,OACE,wBACEN,UAAU,SAEVO,KAAK,SACLC,QAAS,WACPL,EAAgBG,IALpB,SAQGA,GANID,UCMFI,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCGQC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,6BAAKA,KCKRX,EAAU,CACd,CAAEG,GAAI,OAAQC,MAAO,QACrB,CAAED,GAAI,OAAQC,MAAO,WACrB,CAAED,GAAI,OAAQC,MAAO,QAyDRQ,E,4MArDbC,MAAQ,CACNpB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPmB,mBAAqB,WACnB,IAAIlB,EAAQ,EACZ,IAAK,IAAMmB,KAAS,EAAKF,MACvBjB,GAAS,EAAKiB,MAAME,GAEtB,OAAOnB,G,EAEToB,gCAAkC,WAChC,IAAMC,EAAQC,KAAKC,MACE,IAAlB,EAAKN,MAAMpB,KAAc,EAAKqB,sBAEjC,OAAOM,OAAOC,MAAMJ,GAAS,EAAIA,G,EAGnCK,kBAAoB,SAAAlB,GAClB,EAAKmB,UAAS,SAAAC,GACZ,OAAO,eACJpB,EAAQoB,EAAUpB,GAAS,O,uDAKxB,IAAD,EACwBqB,KAAKZ,MAA5BpB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAEvB,OACE,eAAC,EAAD,CAASa,MAAM,wBAAf,UACE,cAAC,EAAD,CACER,QAASA,EACTC,gBAAiBwB,KAAKH,oBAEO,IAA9BG,KAAKX,qBACJ,cAAC,EAAD,CAAcH,QAAQ,yBAEtB,cAAC,EAAD,CACElB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO6B,KAAKX,qBACZjB,mBAAoB4B,KAAKT,2C,GA9CdU,aCDRC,MARf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,EAAD,OCDN8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cb8b885f.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport './Statistics.css';\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div>\n      <h2>Statistics</h2>\n      <ul className=\"list\">\n        <li className=\"item\">\n          <span>Good:</span>\n          <span>{good}</span>\n        </li>\n        <li className=\"item\">\n          <span>Neutral:</span>\n          <span>{neutral}</span>\n        </li>\n        <li className=\"item\">\n          <span>Bad:</span>\n          <span>{bad}</span>\n        </li>\n        <li className=\"item\">\n          <span>Total:</span>\n          <span>{total}</span>\n        </li>\n        <li className=\"item\">\n          <span>Positive feedback:</span>\n          <span>{positivePercentage}%</span>\n        </li>\n      </ul>\n    </div>\n  );\n};\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\nexport default Statistics;\n","import PropTypes from 'prop-types';\nimport './FeedbackOptions.css';\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <div>\n      {options.map(({ id, label }) => {\n        return (\n          <button\n            className=\"button\"\n            key={id}\n            type=\"button\"\n            onClick={() => {\n              onLeaveFeedback(label);\n            }}\n          >\n            {label}\n          </button>\n        );\n      })}\n    </div>\n  );\n};\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n    }),\n  ),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\nexport default Section;\n","import PropTypes from 'prop-types';\nconst Notification = ({ message }) => {\n  return <h2>{message}</h2>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\n\nimport Statistics from '../Statistics/Statistics';\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\nimport Section from '../Section/Section';\nimport Notification from '../Notification/Notification';\n\nconst options = [\n  { id: 'id-1', label: 'good' },\n  { id: 'id-2', label: 'neutral' },\n  { id: 'id-3', label: 'bad' },\n];\n\nclass Feedback extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    let total = 0;\n    for (const value in this.state) {\n      total += this.state[value];\n    }\n    return total;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const count = Math.round(\n      (this.state.good * 100) / this.countTotalFeedback(),\n    );\n    return Number.isNaN(count) ? 0 : count;\n  };\n\n  handleButtonClick = label => {\n    this.setState(prevState => {\n      return {\n        [label]: prevState[label] + 1,\n      };\n    });\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={options}\n          onLeaveFeedback={this.handleButtonClick}\n        />\n        {this.countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback messages\" />\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        )}\n      </Section>\n    );\n  }\n}\n\nexport default Feedback;\n","// import logo from '../logo.svg';\nimport './App.css';\nimport Feedback from '../Feedback/Feedback';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}